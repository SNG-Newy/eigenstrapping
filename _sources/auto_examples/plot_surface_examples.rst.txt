
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_surface_examples.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_surface_examples.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_surface_examples.py:


Getting Started
---------------

Quick introduction to brain maps and eigenmodes
===============================================

Patterns on the cortical surface or in the subcortex ("brain maps") more often
than not express with smoothness - spatial autocorrelation. Accounting
for this in statistical testing of the associations between or the influence
that one brain map has on another is a non-trivial problem. More recently,
methods that account for smoothness have been developed, but these carry their own
issues (see our `paper <https://null.null>`_ for an in-depth discussion on this topic).

Eigenmodes of a surface encode all pairwise (auto)correlations (i.e., smoothness).
The reason for this is too maths heavy for a quick intro, but suffice to say
that this has been discussed many times by people smarter than the people who came up with
this method (see :ref:`References <references>`).

Eigenstrapping offers a solution by leveraging this fact, and another property of
eigenmodes: they are orthogonal. By taking random rotations of them, one can
create new brain maps with the same smoothness but randomized topology. The steps
below will help you get started and build your own surrogate maps.

.. GENERATED FROM PYTHON SOURCE LINES 27-84



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_surface_examples_001.png
         :alt: 4.00
         :srcset: /auto_examples/images/sphx_glr_plot_surface_examples_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_surface_examples_002.png
         :alt: 4.00
         :srcset: /auto_examples/images/sphx_glr_plot_surface_examples_002.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading data from https://files.osf.io/v1/resources/mabr9/providers/osfstorage/65668144aa3a762736d6ab2b ...
     ...done. (3 seconds, 0 min)
    Downloading data from https://files.osf.io/v1/resources/mabr9/providers/osfstorage/6566812ff0b8e24c97a9d80c ...
    Downloaded 933888 of 260655724 bytes (0.4%,  4.6min remaining)    Downloaded 22528000 of 260655724 bytes (8.6%,   21.2s remaining)    Downloaded 49078272 of 260655724 bytes (18.8%,   13.0s remaining)    Downloaded 75554816 of 260655724 bytes (29.0%,    9.8s remaining)    Downloaded 98836480 of 260655724 bytes (37.9%,    8.2s remaining)    Downloaded 124559360 of 260655724 bytes (47.8%,    6.6s remaining)    Downloaded 151420928 of 260655724 bytes (58.1%,    5.1s remaining)    Downloaded 178331648 of 260655724 bytes (68.4%,    3.7s remaining)    Downloaded 205463552 of 260655724 bytes (78.8%,    2.4s remaining)    Downloaded 232464384 of 260655724 bytes (89.2%,    1.2s remaining)    Downloaded 256794624 of 260655724 bytes (98.5%,    0.2s remaining) ...done. (14 seconds, 0 min)
    Downloading data from https://files.osf.io/v1/resources/mabr9/providers/osfstorage/6566812479d42829de3e864c ...
     ...done. (2 seconds, 0 min)
    Downloading data from https://files.osf.io/v1/resources/mabr9/providers/osfstorage/65668144932b9f48b2760891 ...
     ...done. (2 seconds, 0 min)
    Downloading data from https://files.osf.io/v1/resources/mabr9/providers/osfstorage/6566812ef0b8e24c97a9d80a ...
    Downloaded 933888 of 260731636 bytes (0.4%,  4.6min remaining)    Downloaded 22536192 of 260731636 bytes (8.6%,   21.2s remaining)    Downloaded 49168384 of 260731636 bytes (18.9%,   12.9s remaining)    Downloaded 76021760 of 260731636 bytes (29.2%,    9.7s remaining)    Downloaded 101335040 of 260731636 bytes (38.9%,    7.9s remaining)    Downloaded 127393792 of 260731636 bytes (48.9%,    6.3s remaining)    Downloaded 154361856 of 260731636 bytes (59.2%,    4.8s remaining)    Downloaded 179167232 of 260731636 bytes (68.7%,    3.7s remaining)    Downloaded 204857344 of 260731636 bytes (78.6%,    2.5s remaining)    Downloaded 232054784 of 260731636 bytes (89.0%,    1.2s remaining)    Downloaded 259350528 of 260731636 bytes (99.5%,    0.1s remaining) ...done. (13 seconds, 0 min)
    Downloading data from https://files.osf.io/v1/resources/mabr9/providers/osfstorage/65668124932b9f48b276087f ...
     ...done. (2 seconds, 0 min)
    /home/runner/eigenstrapping-data/surfaces/space-fsaverage_den-10k_hemi-lh_pial.surf.gii
    (10242,)
    (10242, 1000)
    (1000,)
    Downloading data from https://files.osf.io/v1/resources/4mw3a/providers/osfstorage/60b684ab9096b7021b63cf6b ...
     ...done. (2 seconds, 0 min)
    Extracting data from /home/runner/neuromaps-data/e38b96d96273aa064c22296eda1e5688/fsaverage10k.tar.gz..... done.
    No surface given, expecting precomputed eigenvalues and eigenmodes
    IMPORTANT: EIGENMODES MUST BE TRUNCATED AT FIRST NON-ZERO MODE FOR THIS FUNCTION TO WORK

    (<Figure size 900x600 with 3 Axes>, <Axes3D: >)





|

.. code-block:: Python

    # Input data types
    # ================

    # ``eigenstrapping`` requires a few inputs:

    # * A brain map, i.e., a one-dimensional vector, and either:

    # * A surface mesh, i.e., a set of vertices and face indices
    # * A set of eigenmodes and corresponding eigenvalues
    
    # For the first run, we will load all of these files from the example dataset,
    # but let's assume that these files have already been generated. 

    # ``eigenstrapping`` can handle a variety of inputs:

    # * Delimited `*.txt` files
    # * Neuroimaging files such as `*.nii`, `*.gii`, or `*scalar.gii`
    # * Data and memory-mapped distance matrices written to `*.npy` files
    # * Numpy arrays and array-like objects

    # First run
    # =========

    # The package comes with example surfaces (and their eigenmodes) and cortical gradient data 
    # from Margulies' 2015 paper (see :ref:`References <references>`). Let's start by importing the data (this may take
    # a few moments):

    from eigenstrapping.datasets import load_surface_examples

    surf_lh, surf_rh, data_lh, data_rh, emodes_lh, emodes_rh, evals_lh, evals_rh = load_surface_examples(with_surface=True)
    print(surf_lh)
 
    print(data_lh.shape)
    
    print(emodes_lh.shape)
    
    print(evals_lh.shape)
    
    #Now let's plot the data on the surface.

    from eigenstrapping.plotting import csplot
    
    csplot(data_lh, 'fsaverage')

    #Now let's make a surrogate brain map and plot it on the surface.

    from eigenstrapping import SurfaceEigenstrapping
    
    eigen = SurfaceEigenstrapping(
                        data=data_lh,
                        emodes=emodes_lh,
                        evals=evals_lh,
                        num_modes=100,
                        resample=True,
                        )
    surr = eigen.generate()
    
    csplot(surr, 'fsaverage')

.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 45.850 seconds)


.. _sphx_glr_download_auto_examples_plot_surface_examples.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_surface_examples.ipynb <plot_surface_examples.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_surface_examples.py <plot_surface_examples.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
